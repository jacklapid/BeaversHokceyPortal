@model BeaversHockeyPortal.Models.EmailTemplateViewModel

@{
    ViewBag.Title = "Create Email Template";
}

<h2>Create Email Template</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if (ViewData["Message"] != null)
        {
            <div class="row text-success" style="margin-bottom:10px">@ViewData["Message"]</div>
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Context, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Context, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Context, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group checkbox-inline">
            @Html.Label("'To' Selection: ")

            @foreach (var value in Enum.GetValues(typeof(BeaversHockeyPortal.Models.ToSelection)))
            {
                @Html.RadioButtonFor(model => model.ToSelection, value, htmlAttributes: new { @class = "toSelectionRadio" })
                @Html.Label(value.ToString())
            }
        </div>
        <div class="form-group specific-to">
            @Html.LabelFor(model => model.ToUserIds, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.ToUserIds, Model.AvailableUsers, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ToUserIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group specific-to">
            @Html.LabelFor(model => model.ToUserTypeIds, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.ToUserTypeIds, Model.AvailableUserTypes, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ToUserTypeIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group specific-to">
            @Html.LabelFor(model => model.ToPlayerStatusIds, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBoxFor(model => model.ToPlayerStatusIds, Model.AvailablePlayerStatuses, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ToPlayerStatusIds, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group text-to">
            @Html.LabelFor(model => model.To, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.To, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.To, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.From, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.From, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.From, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Body, 5, 100, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ManagerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ManagerId, Model.AvailableManagers, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ManagerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Templates")
</div>
<div style="margin-top:20px;width:100%;">
    <button onclick="toggleEmailGuide();">Email Language Guide</button>
    <div class="popover popover-content" id="EmailGuide" style="width:50%; height:50%; top:25%; left:25%; display:none;">
        <p>Context: [[Game:Next]]</p>
        <p>Game Date: [[Self:Date]]</p>
        <p>Player Name: [[Player:Regular]].[[Self]]</p>
        <p>Player Email: [[Player:Regular]].[[Self:Email]]</p>
    </div>
</div>

@section Scripts {
    <script type="text/JavaScript">
        toggleEmailGuide = function()
        {
            var $emailGuide = $('#EmailGuide');

            if ($emailGuide.css("display") == "none")
            {
                $emailGuide.css("display", "block");
            }
            else {
                $emailGuide.css("display", "none");
            }
        }

        $(document).ready(function () {
            var value = '@Model.ToSelection';

            toggleToSelection(value);
        });

        $('.toSelectionRadio').change(function () {
            var value = $(this).val()

            toggleToSelection(value);
        });

        toggleToSelection = function(selectionValue)
        {
            if (selectionValue == '@BeaversHockeyPortal.Models.ToSelection.Specific') {
                $('.specific-to').show();
                $('.text-to').hide();
            }
            else if (selectionValue == '@BeaversHockeyPortal.Models.ToSelection.Text') {
                $('.specific-to').hide();
                $('.text-to').show();
            }
        }

    </script>
}