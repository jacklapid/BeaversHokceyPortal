@model BeaversHockeyPortal.Models.EmailTemplateViewModel

@{
    ViewBag.Title = "Create Email Template";

    ViewBag.PageHeader = "Create new Email Template";
    ViewBag.PageHeaderDescription = "An Email Template is a trigger for email sending";

    ViewBag.BreadCrumbs = new List<BeaversHockeyPortal.Models.BreadcrumbsDescription> {
        new BeaversHockeyPortal.Models.BreadcrumbsDescription {Href  = string.Empty, Name = "Manager Portal" },
        new BeaversHockeyPortal.Models.BreadcrumbsDescription {Href  = "/Email/Templates", Name = "Email Templates" },
        new BeaversHockeyPortal.Models.BreadcrumbsDescription {Href  = string.Empty, Name = "Create Email Template", IsActive = true },
    };
}

<div class="col-md-6">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div>
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @if (ViewData["Message"] != null)
            {
                <div class="row text-success" style="margin-bottom:10px">@ViewData["Message"]</div>
            }
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Context)
            @Html.TextBoxFor(model => model.Context, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Context, "", new { @class = "text-danger" })
        </div>

        <div class="panel panel-default">
            <div class="panel-heading form-group">
                @Html.Label("'To' Selection: ")
                <div class="btn-group btn-group-md" data-toggle="buttons" style="padding-left:25px">
                    @foreach (var value in Enum.GetValues(typeof(BeaversHockeyPortal.Models.ToSelection)))
                    {
                        <label class="btn btn-success  toSelectionRadio">
                            <input name="ToSelection" type="radio" value="@value">@value
                        </label>
                    }
                </div>
            </div>

            <div class="panel-body form-group specific-to">
                @Html.LabelFor(model => model.ToUserIds)
                @Html.ListBoxFor(model => model.ToUserIds, Model.AvailableUsers, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ToUserIds, "", new { @class = "text-danger" })
            </div>

            <div class="panel-body form-group specific-to">
                @Html.LabelFor(model => model.ToUserTypeIds)
                @Html.ListBoxFor(model => model.ToUserTypeIds, Model.AvailableUserTypes, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ToUserTypeIds, "", new { @class = "text-danger" })
            </div>

            <div class="panel-body form-group specific-to">
                @Html.LabelFor(model => model.ToPlayerStatusIds)
                @Html.ListBoxFor(model => model.ToPlayerStatusIds, Model.AvailablePlayerStatuses, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ToPlayerStatusIds, "", new { @class = "text-danger" })
            </div>

            <div class="panel-body form-group text-to">
                @Html.LabelFor(model => model.To)
                @Html.TextBoxFor(model => model.To, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.To, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group ">
            @Html.LabelFor(model => model.From)
            @Html.TextBoxFor(model => model.From, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.From, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject)
            @Html.TextBoxFor(model => model.Subject, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
        </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Body)
                @Html.TextAreaFor(model => model.Body, 5, 100, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.AggrigateLanguageResults)
                @Html.CheckBoxFor(model => model.AggrigateLanguageResults, htmlAttributes: new { @class = "checkbox checkbox-inline" })
                @Html.ValidationMessageFor(model => model.AggrigateLanguageResults, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ManagerId)
                @Html.DropDownListFor(model => model.ManagerId, Model.AvailableManagers, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ManagerId, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-default btn-lg" />
            </div>

    }

    <div>
        @Html.ActionLink("Back to List", "Templates")
    </div>
</div>


<div class="col-md-offset-2 col-md-4" style="margin-top:25px;">
    <div class="panel panel-default">
        <div class="panel-heading text-center">
            <label>Email Language Guide</label>
            <button id="LanguageGuideButton" class="btn btn-primary" onclick="toggleEmailGuide();">Show</button>
        </div>
        <div id="EmailGuide" class="panel-body text-left" style="display:none; top:50px;">
            <p>Context: [[Game:Next]]</p>
            <p>Game Date: [[Self:Date]]</p>
            <p>Player Name: [[Player:Regular]].[[Self]]</p>
            <p>Player Email: [[Player:Regular]].[[Self:Email]]</p>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/JavaScript">
        toggleEmailGuide = function () {
            var $emailGuide = $('#EmailGuide');
            var $button = $('#LanguageGuideButton');

            if ($emailGuide.css("display") == "none") {
                $emailGuide.css("display", "block");
                $button.text("Hide");
            }
            else {
                $emailGuide.css("display", "none");
                $button.text("Show");
            }
        }

        $(document).ready(function () {
            var value = '@Model.ToSelection';

            toggleToSelection(value);

            // set active
            var radioButton = $(".toSelectionRadio input[value='" + value + "']");
            if (radioButton) {
                radioButton.parent().addClass('active');
            }
        });

        $('.toSelectionRadio').on('click', function () {
            var value = $(this).children(":first").val();

            toggleToSelection(value);
        });

        toggleToSelection = function (selectionValue) {
            if (selectionValue == '@BeaversHockeyPortal.Models.ToSelection.Specific') {
                $('.specific-to').show();
                $('.text-to').hide();
            }
            else if (selectionValue == '@BeaversHockeyPortal.Models.ToSelection.Text') {
                $('.specific-to').hide();
                $('.text-to').show();
            }
        }

    </script>
}